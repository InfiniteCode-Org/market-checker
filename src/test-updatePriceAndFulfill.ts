import dotenv from 'dotenv';
import { ContractClient } from './lambda/ContractClient';

dotenv.config();

async function main() {
  const providerUrl = process.env.WEB3_PROVIDER_URL;
  const oracleAddress = process.env.ORACLE_CONTRACT_ADDRESS;
  const marketFactoryAddress = process.env.MARKET_FACTORY_CONTRACT_ADDRESS || '0x0000000000000000000000000000000000000000';
  const pythAddress = process.env.PYTH_CONTRACT_ADDRESS;
  const privateKey = process.env.PRIVATE_KEY;

  if (!providerUrl || !oracleAddress || !pythAddress || !privateKey) {
    throw new Error('Missing required env vars: WEB3_PROVIDER_URL, ORACLE_CONTRACT_ADDRESS, PYTH_CONTRACT_ADDRESS, PRIVATE_KEY');
  }

  // Target market address from your message
  const marketAddress = '0xe3aa4268a8ccfb66fc6d92f8266f791d1f0e7bfc';

  // Your provided VAA hex (ensure it is 0x-prefixed)
  const vaa = '0x504e41550100000003b801000000040d00b7d049cc2e2029e249267a6a99a773a63e9a9c1cadc55cd48ee6fa09b906644429b02fcf99be7e7566ccea2abee994ebe14636b580fc1dc8ab3bec2815606ba50103aa48ad67fa36890e685ba499d798a88317c812adb35595c889fd0820aa76cfb436e3ca6cfd1ff05a57974f3416dd6f413426bbf0fa79c36a9567c1509b72ae6500042e5bcef67f7491d8774a33861be5d55575321b4e6f6f83730c705791721a4a6259e69715f7ca76b3e0414cf40bbe8bb92c708f7f147bfbddeb355407780d3bef010668062a634fddd4fb89b25c189d900c110f2f7cb182397cc5f5984b47a65444e8471601bea6565d35a29955066559800294414e4e0e8370ccccc313efbe537999010827c8af09f299e2f1b8a5ae57ed3a02ccd2f2469123fdc85a405020ec301eb1090b7e1de58ca47e2590661e50a9b5fc856c7b74045b9663b652d0a2f6984b9b10000af569684185ee1291172af33bf6e54c4289323337d7600724223d337f06b35428349932f6fc86ce436a39c86e55951ac5a15815a64661e19fd062b8c7d7f9f0ce010b43537c658cd124f5dd96d00004fc8f564922d3c21b8e0a4936437ea29fe1246b7c8ed9252a84bea0d3e2c0ee7628805aef90bd0358b1909aef365dd69e057f92010c037a404fb812825745e65fd175f908d39db79836dcfbcff5dd1540a2a9c80fc14610f1e10bdcabec2f9f4d36d1beaf14c5e7c01123ce9007b2b1c53b62883d7d000deafe5ba5b8fa5fb5e29c8cafe8d2ed8ae4d0db10526ab5aff0985696d3c0abbb53f4f0242d9b4c515f8ac21db28eab4f198dc80191b5e6aa7185beab88cf8400000f5286cc019c9a900c305b860495a04aeda9643b3f7f3e0f7841ac7d7f72dab28869b23e90e4ae24db5c3155f7565949c87abb61f718c7fb88e86077f790f6a5270010aa2f3f874b1141ad8c2e625dc0823768ecd75f1b0dab581736c3072aa3f8a7c74be83649a24806e7b81b10c339dd261e58efd6888ceddce271dceba33bfb62560011993464f85af0c9385f5364b71129498ead57ec00d3e3ccd094ecfe89230c51771170b85a527080c592d874d2cd5e5029d58d47cfbede672b7348ab05b6700de00012627917d80f362fed80f9c5bb529e1e34af9038e80c02f5776aef6de8df69b40e25a1cf57f6b4c1bba952e80369194618b3312aeff52fca8a07e3563de3603866006896d6f600000000001ae101faedac5851e32b9b23b5f9411a8c2bac4aae3ed4dd7b811dd1a72ea4aa710000000008f5d264014155575600000000000e03653800002710323d80477d1146f07fe5eba0b7594744fcc3c928030055004279e31cc369bbcc2faf022b382b080e32a8e689ff20fbc530d2a603eb6cd98b00000000f69739a200000000004b1f04fffffff8000000006896d6f6000000006896d6f500000000f4fd96bc00000000004166e10cf5b62b2c5d676e4113db96ab983bd83cb0c1915ae69374844892074699c8f02b64d1e89e275465a53c0fb48eb542b14d110e926ff04f4b069cc45a2b5f6e39fbab32464f72fbfcb9cc6518d41aeef9c4b901d8c4870f36177606c02209eb5dda24a170796c36a30e31182e9110ba02102b2b534cb768a0fad3935d52ef0ec7cfaff6308d460c4dd9a892966cc2ec5ef922d09d4141b9e7bbcc4cea4c49504158f5bce7f96311fae3d41ffc8f3b37b87ec15ec403a14434a4c891f4d90d450f04a3560776c690b54be081cf4f5f4e9f0453d34d0c947db21f029c02aaaab3b313560240ecc9b0c2d93f79f5f39ff1a689005500ff61491a931112ddf1bd8147cd1b641375f79f5825126d665480874634fd0ace0000005f762d81c40000000023f76bd9fffffff8000000006896d6f6000000006896d6f50000005e8bd38120000000000ca94f570c9fbdeddd2aa87306ecb6d290870b0f1bbf39fa05fe026a24456c1ca03fb081ac661a3603ea986a9dbeaf779f57468342542b3dec9c82699076e1be53dccf065209eb707d75f386e42e2bc904504d4f773f14baced3316e2d612a70e85b062b48dfa8d03e0f72a8084486343fbaf5872a0f3c18699f6bed9402f118369f0c1be1f460d8c9134ace368194c7645501f0088279ae73860eaa23832b49d01082e517059a8af4343b18509da8600ff0e126468057d2db0b8110afb14502e929a9e15a2f00a67e749836bee3609c1fdfde3167c1d99a94e06a5a12f259cc1eaab3b313560240ecc9b0c2d93f79f5f39ff1a689005500765d2ba906dbc32ca17cc11f5310a89e9ee1f6420508c63861f2f8ba4ee34bb2000000000033d8fc0000000000000715fffffffd00000000689665530000000068966553000000000033d23e00000000000002f90c89bea185f8dfe0aadf4467b054c2b1e66628d571d8b6800cbc4708263fa3f5c9a62b7e606926223a0b173019b6a1e2c931567c3913a805e2af9c031ae8b11c0e5566fb0b63c8a7fbe801eaa8e6bc9722eea78c776934edcb0a0ed0b36adaca8d1f81717f7b05aa0940e3675b53b52adbb2598b7e29d2b9abf40daed0c7170b65f577e01fa8fcaaa7f95e29d0a2db273eee58b792fbe9aeb96c990723843f8777a39de65b3bcf28f613e3d1b23d990741d10d2c68a14434a4c891f4d90d450f04a3560776c690b54be081cf4f5f4e9f0453d34d0c947db21f029c02aaaab3b313560240ecc9b0c2d93f79f5f39ff1a689';

  const vaas: string[] = [vaa.startsWith('0x') ? vaa : `0x${vaa}`];

  const client = new ContractClient(
    providerUrl,
    oracleAddress,
    marketFactoryAddress,
    pythAddress,
    privateKey
  );

  console.log(`Prepared to call updatePriceAndFulfill`);
  console.log(`Market: ${marketAddress}`);
  console.log(`VAA[0] length (hex chars): ${vaas[0].length}`);

  const txHash = await client.updatePriceAndFulfill(marketAddress, vaas);
  console.log(`Done. txHash: ${txHash}`);
}

main().catch((err) => {
  console.error(err);
  process.exit(1);
});







